name: CodeAnalysis

on:
  push:
    branches:
      - master
      - develop
      - feature/**
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened
  workflow_call:

jobs:

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v3
        with:
         node-version: 12

      - name: install NPM
        run: npm i

      - name: run tests
        run: npm run test

      - name: saves cache
        uses: actions/cache@v3
        with:
          path: coverage/
          key: coverage

  sonarcloud:
    needs: test
    runs-on: ubuntu-latest
    steps:
     - name: checkout repository
       uses: actions/checkout@v3
       with:
          fetch-depth: 0
     - name: load cache
       uses: actions/cache@v3
       with:
        path: coverage/
        key: coverage

     - name: add project key  
       run: |
            echo "PROJECT_KEY=${GITHUB_REPOSITORY_OWNER}_${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
            echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV     
     - name: run sonarcloud
       uses: SonarSource/sonarcloud-github-action@master
       env: 
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
       with:   
        args: >
          -Dsonar.organization=clm-ds
          -Dsonar.projectKey=${{ env.PROJECT_KEY }}
          -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.sources=.
  sonarQG:
    needs: sonarcloud
    runs-on: ubuntu-latest
    steps:
     - name: Add project key & Git Branch
       run: |
            echo "PROJECT_KEY=${GITHUB_REPOSITORY_OWNER}_${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
            echo "GIT_BRANCH=${GITHUB_REF##*refs/heads/}" >> $GITHUB_ENV   
     - name: checkout repository
       uses: actions/checkout@v3
       with:
          fetch-depth: 0
     - name: checkout repository
       run: |
            sleep 30s
            STATUS=$(curl -s SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?branch=${{ env.GIT_BRANCH }}&projectKey=${{ env.PROJECT_KEY }}" | jq -r .projectStatus.status)
            echo $STATUS
            if [ $STATUS == "ERROR" ]
            then
            echo "Analyzed branch doesnt meets minimun quality"
            exit 1
            fi
